{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dhananjay srinivas\\\\Desktop\\\\REACT\\\\img-managememt-app-main\\\\src\\\\components\\\\UI\\\\Media.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Image from '../Image/Image';\nimport { galleryActions } from '../../store/images-slice';\nimport classes from './Media.module.css';\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Media = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const searchTerm = useSelector(state => state.gallery.searchTerm);\n  const images = useSelector(state => state.gallery.images);\n  const baseUrl = 'https://api.unsplash.com/photos?client_id=8tIIkbGFrxgSQQ9mOkHiXhbenY2VNescsdy2HYcljVs';\n\n  const storePhotosFromWeb = () => {\n    (async () => {\n      const res = await fetch(`${baseUrl}&per_page=20`);\n      const resData = await res.json();\n      resData.map(_ref => {\n        let {\n          id,\n          height,\n          width,\n          created_at,\n          description,\n          urls: {\n            thumb\n          }\n        } = _ref;\n        return {\n          id: id,\n          url: thumb,\n          name: description,\n          description: description,\n          height: height,\n          width: width,\n          date: created_at,\n          isChecked: false\n        };\n      }).forEach(img => dispatch(galleryActions.addImgToGallery(img)));\n    })().catch(err => {\n      // Send error log to metric service, Sentry etc\n      console.error(err);\n    });\n  };\n\n  useEffect(() => {\n    storePhotosFromWeb();\n  }, []);\n  const filteredImages = images.filter(img => img.name.includes(searchTerm)); //check if filteredImages is empty- if yes then render a fallback mssg, else render imgs\n\n  const imageList = filteredImages.length === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n    children: \"Uh-oh! Nothing to show.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this) : filteredImages.map(img => /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Image, {\n      id: img.id,\n      name: img.name,\n      description: img.description,\n      height: img.height,\n      width: img.width,\n      url: img.url,\n      isChecked: img.isChecked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, img.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.media,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.row,\n      children: imageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Media, \"Sb+LIasZlbEsuVrzJ3z2fjJQWAs=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Media;\nexport default Media;\n\nvar _c;\n\n$RefreshReg$(_c, \"Media\");","map":{"version":3,"sources":["C:/Users/Dhananjay srinivas/Desktop/REACT/img-managememt-app-main/src/components/UI/Media.js"],"names":["useEffect","useDispatch","useSelector","Image","galleryActions","classes","Card","Media","dispatch","searchTerm","state","gallery","images","baseUrl","storePhotosFromWeb","res","fetch","resData","json","map","id","height","width","created_at","description","urls","thumb","url","name","date","isChecked","forEach","img","addImgToGallery","catch","err","console","error","filteredImages","filter","includes","imageList","length","media","row"],"mappings":"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","sourcesContent":["import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Image from '../Image/Image';\r\nimport {galleryActions} from '../../store/images-slice';\r\nimport classes from './Media.module.css';\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst Media = () => {\r\n    const dispatch = useDispatch();\r\n    const searchTerm = useSelector(state => state.gallery.searchTerm);\r\n    const images = useSelector(state => state.gallery.images);\r\n    const baseUrl = 'https://api.unsplash.com/photos?client_id=8tIIkbGFrxgSQQ9mOkHiXhbenY2VNescsdy2HYcljVs'\r\n    const storePhotosFromWeb = () => {\r\n        (async () => {\r\n            const res = await fetch(`${baseUrl}&per_page=20`);\r\n            const resData = await res.json();\r\n            resData.map(({id, height, width, created_at, description, urls: {thumb}}) => {\r\n                return {\r\n                    id: id,\r\n                    url: thumb,\r\n                    name: description,\r\n                    description: description,\r\n                    height: height,\r\n                    width: width,\r\n                    date: created_at,\r\n                    isChecked: false\r\n                }\r\n            }).forEach((img) => dispatch(galleryActions.addImgToGallery(img)))\r\n        })().catch(err => {\r\n            // Send error log to metric service, Sentry etc\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        storePhotosFromWeb();\r\n    }, []);\r\n\r\n    const filteredImages = images.filter(img => img.name.includes(searchTerm));\r\n\r\n    //check if filteredImages is empty- if yes then render a fallback mssg, else render imgs\r\n    const imageList = filteredImages.length === 0\r\n        ? (<h4>Uh-oh! Nothing to show.</h4>)\r\n        : filteredImages.map(img => (\r\n            <Card key={img.id}>\r\n                <Image\r\n                    id={img.id}\r\n                    name={img.name}\r\n                    description={img.description}\r\n                    height={img.height}\r\n                    width={img.width}\r\n                    url={img.url}\r\n                    isChecked={img.isChecked}\r\n                />\r\n            </Card>)\r\n        );\r\n\r\n    return (\r\n        <section className={classes.media}>\r\n            <div className={classes.row}>\r\n                {imageList}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Media;\r\n"]},"metadata":{},"sourceType":"module"}