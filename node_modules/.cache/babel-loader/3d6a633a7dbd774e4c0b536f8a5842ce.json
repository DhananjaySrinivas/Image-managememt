{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst galleryInitialState = {\n  images: [],\n  searchTerm: \"\",\n  selectAll: false,\n  isSelected: false\n};\nconst gallerySlice = createSlice({\n  name: \"gallery\",\n  initialState: galleryInitialState,\n  reducers: {\n    addToGallery(state, action) {\n      const newImg = action.payload;\n      const existingImg = state.images.find(img => img.id === newImg.id);\n\n      if (!existingImg) {\n        state.images.push({\n          id: newImg.id,\n          url: newImg.url,\n          name: newImg.name,\n          description: newImg.description,\n          height: newImg.height,\n          width: newImg.width,\n          date: newImg.date,\n          isChecked: newImg.isChecked\n        });\n      }\n    },\n\n    removeImgFromGallery(state, action) {\n      state.images = state.images.filter(img => img.isChecked !== true);\n    },\n\n    updateSelectAll(state) {\n      state.selectAll = !state.selectAll;\n\n      if (state.selectAll) {\n        state.images.forEach(img => img.isChecked = true);\n      } else {\n        state.images.forEach(img => img.isChecked = false);\n      }\n\n      state.isSelected = state.images.some(img => img.isChecked === true);\n    },\n\n    updateSearchTerm(state, action) {\n      const searchTerm = action.payload;\n      state.searchTerm = searchTerm;\n    },\n\n    updateImgToSelected(state, action) {\n      const id = action.payload;\n      const existingImg = state.images.find(img => img.id === id);\n      existingImg.isChecked = !existingImg.isChecked;\n      state.isSelected = state.images.some(img => img.isChecked === true);\n    },\n\n    sortByTitle(state) {\n      state.images = state.images.sort((imgA, imgB) => imgA.name - imgB.name);\n    },\n\n    sortByDate(state) {\n      state.images = state.images.sort((imgA, imgB) => new Date(imgA.date) - new Date(imgB.date));\n    },\n\n    sortBySize(state) {\n      state.images = state.images.sort((imgA, imgB) => imgA.height * imgA.width - imgB.height * imgB.width);\n    }\n\n  }\n});\nexport const galleryActions = gallerySlice.actions;\nexport default gallerySlice;","map":{"version":3,"sources":["C:/Users/Dhananjay srinivas/Desktop/REACT/img-managememt-app-main/src/store/images-slice.js"],"names":["createSlice","galleryInitialState","images","searchTerm","selectAll","isSelected","gallerySlice","name","initialState","reducers","addToGallery","state","action","newImg","payload","existingImg","find","img","id","push","url","description","height","width","date","isChecked","removeImgFromGallery","filter","updateSelectAll","forEach","some","updateSearchTerm","updateImgToSelected","sortByTitle","sort","imgA","imgB","sortByDate","Date","sortBySize","galleryActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst galleryInitialState = {\r\n  images: [],\r\n  searchTerm: \"\",\r\n  selectAll: false,\r\n  isSelected: false,\r\n};\r\n\r\nconst gallerySlice = createSlice({\r\n  name: \"gallery\",\r\n  initialState: galleryInitialState,\r\n  reducers: {\r\n    addToGallery(state, action) {\r\n      const newImg = action.payload;\r\n      const existingImg = state.images.find((img) => img.id === newImg.id);\r\n\r\n      if (!existingImg) {\r\n        state.images.push({\r\n          id: newImg.id,\r\n          url: newImg.url,\r\n          name: newImg.name,\r\n          description: newImg.description,\r\n          height: newImg.height,\r\n          width: newImg.width,\r\n          date: newImg.date,\r\n          isChecked: newImg.isChecked,\r\n        });\r\n      }\r\n    },\r\n    removeImgFromGallery(state, action) {\r\n      state.images = state.images.filter((img) => img.isChecked !== true);\r\n    },\r\n    updateSelectAll(state) {\r\n      state.selectAll = !state.selectAll;\r\n\r\n      if (state.selectAll) {\r\n        state.images.forEach((img) => (img.isChecked = true));\r\n      } else {\r\n        state.images.forEach((img) => (img.isChecked = false));\r\n      }\r\n      state.isSelected = state.images.some((img) => img.isChecked === true);\r\n    },\r\n\r\n    updateSearchTerm(state, action) {\r\n      const searchTerm = action.payload;\r\n      state.searchTerm = searchTerm;\r\n    },\r\n\r\n    updateImgToSelected(state, action) {\r\n      const id = action.payload;\r\n      const existingImg = state.images.find((img) => img.id === id);\r\n      existingImg.isChecked = !existingImg.isChecked;\r\n      state.isSelected = state.images.some((img) => img.isChecked === true);\r\n    },\r\n\r\n    sortByTitle(state) {\r\n      state.images = state.images.sort((imgA, imgB) => imgA.name - imgB.name\r\n      );\r\n    },\r\n    sortByDate(state) {\r\n      state.images = state.images.sort(\r\n        (imgA, imgB) => new Date(imgA.date) - new Date(imgB.date)\r\n      );\r\n    },\r\n    sortBySize(state) {\r\n      state.images = state.images.sort(\r\n        (imgA, imgB) => imgA.height * imgA.width - imgB.height * imgB.width\r\n      );\r\n    },\r\n  },\r\n});\r\nexport const galleryActions = gallerySlice.actions;\r\nexport default gallerySlice;\r\n"]},"metadata":{},"sourceType":"module"}